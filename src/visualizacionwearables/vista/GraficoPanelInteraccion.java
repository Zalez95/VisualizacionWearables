package visualizacionwearables.vista;

import java.awt.Color;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import javax.swing.SwingUtilities;

/**
 * GraficoLabel Modificado con interaccion mediante raton
 * 
 * @author  Daniel González Alonso
 * @since   27/07/2016
 * @version 1.0
 */
public class GraficoPanelInteraccion extends GraficoPanel
        implements MouseListener, MouseMotionListener{    
    
    /** Los posibles estados del raton */
    private enum MouseState {
        Pressed,
        Dragging,
        Released
    };
    
    private int mMouseIniPosition;
    private int mMouseEndPosition;
    private final int mRectanguloSeleccion;
    private MouseState mCurState;
    
    
    /**
     * Creates new form GraficoLabelInteraccion
     */
    public GraficoPanelInteraccion() {
        super();
        mCurState = MouseState.Released;
        
        mRectanguloSeleccion = addRectangulo( new Color(0, 0, 255, 100) );
        addMouseListener(this);
        addMouseMotionListener(this);
    }
    
    /** Construye un nuevo grafico
     * 
     * @param circulos si queremos que se muestren los circulos o no
     * @param rejilla si queremos que se muestren lo rejilla o no
     * @param unidades si queremos que se muestren las unidades o no */
    public GraficoPanelInteraccion(boolean circulos, boolean rejilla, boolean unidades) {
        super(circulos, rejilla, unidades);
        mCurState = MouseState.Released;
        
        mRectanguloSeleccion = addRectangulo( new Color(0, 0, 255, 100) );
        addMouseListener(this);
        addMouseMotionListener(this);
    }
        
    /** @return el rectangulo que representa la zona seleccionada en el grafico
     *      por el usuario*/
    public Rectangulo getSeleccion() {
        return getRectangulo(mRectanguloSeleccion);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void mouseClicked(MouseEvent e) {}

    @Override
    public void mouseEntered(MouseEvent e) {}

    @Override
    public void mouseExited(MouseEvent e) {}

    @Override
    public void mouseMoved(MouseEvent e) {}

    @Override
    public void mousePressed(MouseEvent e) {
        if (SwingUtilities.isLeftMouseButton(e)) {
            mCurState = MouseState.Pressed;
            mMouseIniPosition = (int)e.getPoint().getX();
        }
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        if (SwingUtilities.isLeftMouseButton(e)) {
            if (mCurState == MouseState.Pressed) {
                getRectangulo(mRectanguloSeleccion).reset();
                repaint();
            }
            mCurState = MouseState.Released;
        }
    }

    @Override
    public void mouseDragged(MouseEvent e) {
        if (SwingUtilities.isLeftMouseButton(e) 
            && (mCurState != MouseState.Released)) {
        
            mCurState = MouseState.Dragging;
            
            // Limitamos el valor de la posicion del cursor al tamaño del panel
            int curPosition = (int)e.getPoint().getX(),
                width = getWidth();
            if (curPosition < width) {
                if (curPosition >= 0) {
                    mMouseEndPosition = curPosition;
                } else {
                    mMouseEndPosition = 0;
                }
            } else {
                mMouseEndPosition = width-1;
            }
            
            // Dibujamos los rectangulos
            Rectangulo rect = getRectangulo(mRectanguloSeleccion);
            if (mMouseEndPosition > mMouseIniPosition) {
                rect.setIniPosition(mMouseIniPosition);
                rect.setLongitud(mMouseEndPosition - mMouseIniPosition);
            } else {
                this.getWidth();
                rect.setIniPosition(mMouseEndPosition);
                rect.setLongitud(mMouseIniPosition - mMouseEndPosition);
            }

            repaint();
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
